matmul:
    // x10-x16 are used to transfer parameters
    0000000 01010 01010 100 01010 0110011
    000000000000 01010 000 01010 0010011 # base address for weight matrix in ram
    0000000 01011 01011 100 01011 0110011
    010000000000 01011 000 01011 0010011
    0000000 00010 01011 001 01011 0010011
    010000000000 01011 000 01011 0010011
    010000000000 01011 000 01011 0010011 # base address for input matrix in ram
    0000000 01100 01100 100 01100 0110011
    000000000001 01100 000 01100 0010011
    0000000 01111 01100 001 01100 0010011
    0000000 01101 01101 100 01101 0110011
    000000000001 01101 000 01101 0010011
    0000000 01101 01101 001 01101 0010011
    0000000 01101 01100 000 01100 0110011
    010000000000 01100 000 01100 0010011
    010000000000 01100 000 01100 0010011
    001100000000 01100 000 01100 0010011 # base address for output matrix in ram
    0000000 01101 01101 100 01101 0110011
    000000010000 01101 000 01101 0010011 # weight matrix's height
    0000000 01110 01110 100 01110 0110011
    000110000000 01110 000 01110 0010011 # weight matrix's width
    0000000 01111 01111 100 01111 0110011
    000110000000 01111 000 01111 0010011 # input matrix's height
    0000000 10000 10000 100 10000 0110011
    000011000100 10000 000 10000 0010011 # input matrix's width // line 25

    0000000 00111 00111 100 00111 0110011
    000000001000 00111 000 00111 0010011 # weight tile height
    0000000 01001 01001 100 01001 0110011
    000010000000 01001 000 01001 0010011 # weight tile width

    # execution loop begins
    0000000 00101 00101 100 00101 0110011 # wh_out
    0000000 10011 10011 100 10011 0110011
    0000000 01010 10011 000 10011 0110011 # base addr for each tile in weight matrix
    0000000 11111 11111 100 11111 0110011
    0000000 01100 11111 000 11111 0110011 # base addr for output tile
tile_outer_loop:
    0000000 00110 00110 100 00110 0110011 # ww_out
    0000000 10110 10110 100 10110 0110011
    0000000 01011 10110 000 10110 0110011 # base addr for input matrix
tile_inner_loop: # for tiles in the same rows


    # Step1: Load weight matrix into CIM Module
    0000000 10001 10001 100 10001 0110011 # wh_in
    0000000 10100 10100 100 10100 0110011 # base addr for cim memory
load_weight_to_cim_memory:
    0000000 10010 10010 100 10010 0110011 # ww_in
load_inner_loop:
    000000000000 10011 010 10101 0000011
    0000000 10100 10101 000 00000 1111111
    # update addresses
    000000000100 10011 000 10011 0010011
    000000000100 10100 000 10100 0010011
    # update loop variants
    000000000100 10010 000 10010 0010011
    1111111 01001 10010 100 01001 1100011
    000000000001 10001 000 10001 0010011
    1111110 00111 10001 100 11101 1100011

    # Step2: Load inputs, calculate, and store results
    # assume input/weight matrix are stored tile by tile
    # assume input matrix is stored in transposed manner
    # assume output matrix is stored in normal order
    0000000 10001 10001 100 10001 0110011 # iw
    0000000 11001 11001 100 11001 0110011
    0000000 11111 11001 000 11001 0110011 # base addr for current output column
load_input_and_calculate:
    0000000 10010 10010 100 10010 0110011 # ih
    0000000 10111 10111 100 10111 0110011 # base addr for cim memory
calc_inner_loop:
    000000000000 10110 010 11000 0000011
    0000000 10111 11000 001 00000 1111111
    # update addresses
    000000000100 10110 000 10110 0010011
    000000001000 10111 000 10111 0010011
    # update loop variants
    000000001000 10010 000 10010 0010011
    1111111 01001 10010 100 01001 1100011

    # accumulate to previous results after this input column's calculation is finished
    0000000 11010 11010 100 11010 0110011
    0000000 11001 11010 000 11010 0110011 // output matrix's dst address
    0000000 11100 11100 100 11100 0110011 // cim register's id
    0000000 11110 11110 100 11110 0110011
    0000000 10000 11110 000 11110 0110011
    000000000010 11110 001 11110 0010011 # output address's bias value (in 1byte's granularity)

    000000000000 11010 010 11011 0000011
    0000000 00000 11100 011 11101 1111111
    0000000 11101 11011 000 11011 0110011
    0000000 11011 11010 010 00000 0100011

    0000000 11110 11010 000 11010 0110011
    000000000001 11100 000 11100 0010011
    000000000000 11010 010 11011 0000011
    0000000 00000 11100 011 11101 1111111
    0000000 11101 11011 000 11011 0110011
    0000000 11011 11010 010 00000 0100011

    0000000 11110 11010 000 11010 0110011
    000000000001 11100 000 11100 0010011
    000000000000 11010 010 11011 0000011
    0000000 00000 11100 011 11101 1111111
    0000000 11101 11011 000 11011 0110011
    0000000 11011 11010 010 00000 0100011

    0000000 11110 11010 000 11010 0110011
    000000000001 11100 000 11100 0010011
    000000000000 11010 010 11011 0000011
    0000000 00000 11100 011 11101 1111111
    0000000 11101 11011 000 11011 0110011
    0000000 11011 11010 010 00000 0100011

    0000000 11110 11010 000 11010 0110011
    000000000001 11100 000 11100 0010011
    000000000000 11010 010 11011 0000011
    0000000 00000 11100 011 11101 1111111
    0000000 11101 11011 000 11011 0110011
    0000000 11011 11010 010 00000 0100011

    0000000 11110 11010 000 11010 0110011
    000000000001 11100 000 11100 0010011
    000000000000 11010 010 11011 0000011
    0000000 00000 11100 011 11101 1111111
    0000000 11101 11011 000 11011 0110011
    0000000 11011 11010 010 00000 0100011

    0000000 11110 11010 000 11010 0110011
    000000000001 11100 000 11100 0010011
    000000000000 11010 010 11011 0000011
    0000000 00000 11100 011 11101 1111111
    0000000 11101 11011 000 11011 0110011
    0000000 11011 11010 010 00000 0100011

    0000000 11110 11010 000 11010 0110011
    000000000001 11100 000 11100 0010011
    000000000000 11010 010 11011 0000011
    0000000 00000 11100 011 11101 1111111
    0000000 11101 11011 000 11011 0110011
    0000000 11011 11010 010 00000 0100011

    # reset all output registers
    0000000 00000 00000 100 00000 1111111

    000000000001 10001 000 10001 0010011
    000000000100 11001 000 11001 0010011
    # add nop?
    1111000 10000 10001 100 00001 1100011

update_outer_loop:
    0000000 01001 00110 000 00110 0110011
    1110110 01110 00110 100 00001 1100011
    
    0000000 00011 10000 001 00001 0010011
    0000000 00010 00001 001 00001 0010011 // each element occupies 4 bytes
    0000000 00001 11111 000 11111 0110011 // update output tile's addr
    0000000 00111 00101 000 00101 0110011
    1110101 01101 00101 100 00001 1100011